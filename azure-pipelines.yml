trigger: none
pr:
- master

schedules:
  - cron: "0 23 * * *"
    displayName: Nightly build of project
    branches:
      include:
      - master
    always: true

parameters:
- name: VCPKG_CHECKOUT
  displayName: VCPKG commit
  type: string
  default: 2020.11-1
  values:
  - 2020.11-1
  - 2020.11
  - 2020.07
  - 2020.06
  - 2020.04
  - 2020.01
  - master
- name: WINDOWS_IMAGE
  displayName: Windows image
  type: string
  default: vs2017-win2016
  values:
  - windows-latest
  - windows-2019
  - vs2017-win2016
- name: MACOS_IMAGE
  displayName: macOS image
  type: string
  default: macOS-10.15
  values:
  - macOS-latest
  - macOS-10.15
  - macOS-10.14
- name: LINUX_IMAGE
  displayName: Linux image
  type: string
  default: ubuntu-18.04
  values:
  - ubuntu-latest
  - ubuntu-18.04
  - ubuntu-16.04
- name: VCPKG_REPOSITORY
  displayName: VCPKG repository
  type: string
  default: https://github.com/Microsoft/vcpkg.git
  values:
    - https://github.com/Microsoft/vcpkg.git
- name: UNIV_PACKAGE_PUBLISH
  displayName: Publish Universal Package
  type: boolean
  default: false
- name: UNIV_PACKAGE_VERSION
  displayName: Version of Universal Package
  type: string
  default: 0.0.0
- name: USE_GIT_TAGGED_RELEASE
  displayName: Use tagged release of repository
  type: boolean
  default: false

resources:
  repositories:
  - repository: nordic-vcpkg-overlay-tagged
    type: github
    endpoint: NordicPlayground
    name: NordicPlayground/vcpkg-overlay-ports-public
    ref: master
  - repository: nordic-vcpkg-overlay-master
    type: github
    endpoint: NordicPlayground
    name: NordicPlayground/vcpkg-overlay-ports-public
    trigger:
      branches:
        include:
        - master

variables:
- name: system.debug
  value: true
- group: wayland

jobs:
- job: Build
  strategy:
      matrix:
        Linux:
          imageName: ${{ parameters.LINUX_IMAGE }}
          vcpkg_triplet: 'x64-linux'
          architecture: 'x64'
        macOS:
          imageName: ${{ parameters.MACOS_IMAGE }}
          vcpkg_triplet: 'x64-osx'
          architecture: 'x64'
        win64-shared:
          imageName: ${{ parameters.WINDOWS_IMAGE }}
          architecture: 'x64'
          vcpkg_triplet: 'x64-windows'
          vcvars_path: "C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/vc/Auxiliary/build/vcvarsall.bat"
        win32-shared:
          imageName: ${{ parameters.WINDOWS_IMAGE }}
          architecture: 'x86'
          vcpkg_triplet: 'x86-windows'
          vcvars_path: "C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/vc/Auxiliary/build/vcvarsall.bat"

  pool:
    vmImage: $(imageName)
  variables:
    VCPKG_ROOT: '$(Agent.HomeDirectory)/vcpkg'
    VCPKG_COMMON_PACKAGES: 'spdlog nrf-ble-driver'
    VCPKG_OVERLAY_PORTS_DIRECTORY: '$(Build.SourcesDirectory)/vcpkg-overlay-ports-public/ports'
    VCPKG_COMMON_ARGUMENTS: '--overlay-ports=$(VCPKG_OVERLAY_PORTS_DIRECTORY)'
    VCPKG_EXPORT_FILENAME: vcpkg-export-public-$(vcpkg_triplet)-$(Build.BuildNumber)

  steps:
  - checkout: self
  - ${{ if eq(parameters.USE_GIT_TAGGED_RELEASE, true) }}:
    - checkout: nordic-vcpkg-overlay-tagged
  - ${{ if eq(parameters.USE_GIT_TAGGED_RELEASE, false) }}:
    - checkout: nordic-vcpkg-overlay-master

  # Install the toolchains -- start --
  - bash: |
      # Exit when any command fails
      set -e

      sudo apt-get update
      sudo apt-get install ninja-build libudev-dev gcc-9 g++-9 clang-9 clang-format-9 clang-tidy-9 libusb-1.0-0-dev
    condition: contains(variables['imageName'], 'ubuntu')
    displayName: '[Linux] Install toolchain'
  - bash: |
      # Exit when any command fails
      set -e

      # Note that installing gcc@6 will not change `gcc`/`g++` on
      # PATH, and those will still be Apple Clang.
      brew install ninja gcc@9 libusb pkg-config openssl llvm@8 llvm@9
      # llvm@8 is used by nrftools teams and the compiler flags
      # provided needs llvm@8

      ln -s "$(brew --prefix llvm)/bin/clang-format" "/usr/local/bin/clang-format"
      ln -s "$(brew --prefix llvm)/bin/clang-tidy" "/usr/local/bin/clang-tidy"

    condition: contains(variables['imageName'], 'mac')
    displayName: '[macOS] Install toolchain'
  - script: |
      choco install ninja
      choco install cmake --version=3.17.2
    condition: contains(variables['imageName'], 'win')
    displayName: '[Windows] Setup toolchain'
  # Install the toolchains -- end --

  - bash: |
      git clone ${{ parameters.VCPKG_REPOSITORY }} $VCPKG_ROOT
      git -C $VCPKG_ROOT checkout ${{ parameters.VCPKG_CHECKOUT }}

      export CXX=g++-9
      export CC=gcc-9

      $VCPKG_ROOT/bootstrap-vcpkg.sh -disableMetrics
      $VCPKG_ROOT/vcpkg install $(VCPKG_COMMON_ARGUMENTS) $(VCPKG_COMMON_PACKAGES)

      $VCPKG_ROOT/vcpkg export  $(VCPKG_COMMON_ARGUMENTS) --zip --output=$(VCPKG_EXPORT_FILENAME) $(VCPKG_COMMON_PACKAGES)
    env:
      TMPDIR: $(Agent.TempDirectory)
    condition: contains(variables['imageName'], 'ubuntu')
    displayName: '[Linux] Install and export vcpkg packages'
  - bash: |
      git clone ${{ parameters.VCPKG_REPOSITORY }} $VCPKG_ROOT
      git -C $VCPKG_ROOT checkout ${{ parameters.VCPKG_CHECKOUT }}
      CC=gcc-9 CXX=g++-9 $VCPKG_ROOT/bootstrap-vcpkg.sh -disableMetrics

      # pkg-config required by bzip2
      brew install pkg-config

      CC="$(brew --prefix llvm@8)/bin/clang" CXX="$(brew --prefix llvm@8)/bin/clang++" $VCPKG_ROOT/vcpkg install $(VCPKG_COMMON_ARGUMENTS) $(VCPKG_COMMON_PACKAGES)
      $VCPKG_ROOT/vcpkg export  $(VCPKG_COMMON_ARGUMENTS) --zip --output=$(VCPKG_EXPORT_FILENAME) $(VCPKG_COMMON_PACKAGES)
    env:
      TMPDIR: $(Agent.TempDirectory)
    condition: contains(variables['imageName'], 'mac')
    displayName: '[macOS] Install and export vcpkg packages'
  - script: |
      git clone ${{ parameters.VCPKG_REPOSITORY }} %VCPKG_ROOT%
      git -C %VCPKG_ROOT% checkout ${{ parameters.VCPKG_CHECKOUT }}
      cd /d %VCPKG_ROOT%
      bootstrap-vcpkg.bat -disableMetrics
    condition: contains(variables['imageName'], 'win')
    displayName: '[Windows] Build vcpkg (bootstrap-vcpkg.bat exits the shell)'
  - script: |
      cd %TEMP%
      %VCPKG_ROOT%\vcpkg install $(VCPKG_COMMON_ARGUMENTS) --triplet $(vcpkg_triplet) %VCPKG_COMMON_PACKAGES%
      echo "Exporting vcpkg packages..."
      %VCPKG_ROOT%\vcpkg export  $(VCPKG_COMMON_ARGUMENTS) --triplet $(vcpkg_triplet) --zip --output=$(VCPKG_EXPORT_FILENAME) %VCPKG_COMMON_PACKAGES%
    env:
      TEMP: $(Agent.TempDirectory)
    condition: contains(variables['imageName'], 'win')
    displayName: '[Windows] Install and export vcpkg packages'
  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(VCPKG_ROOT)"
      contents: "vcpkg-export-public-*.zip"
      targetFolder: $(Build.ArtifactStagingDirectory)
  - bash: |
      # Exit when any command fails
      set -e

      $WAYLAND_AZURE_SCRIPTS_ROOT/azure-setup.sh
      source $HOME/.waylandrc

      az login

      echo "Trying to upload artifact(s) from directory $BUILD_ARTIFACTSTAGINGDIRECTORY"
      ls -la $BUILD_ARTIFACTSTAGINGDIRECTORY

      az pipelines runs artifact upload --verbose --output table --artifact-name vcpkg-export-public-$VCPKG_TRIPLET --path $BUILD_ARTIFACTSTAGINGDIRECTORY --run-id $BUILD_BUILDID
    env:
      AZURE_DEVOPS_EXT_PAT: $(WAYLAND_AZ_USER_PAT)
      WAYLAND_AZURE_SCRIPTS_ROOT: vcpkg-export-public/scripts
      ARTIFACT_ARCH: $(architecture)
      VCPKG_TRIPLET: $(vcpkg_triplet)
    displayName: Publish pipeline artifact
  - ${{ if eq(parameters.UNIV_PACKAGE_PUBLISH, true) }}:
    - bash: |
        # Exit when any command fails
        set -e
        source $HOME/.waylandrc

        az login

        export UNIV_PACKAGE_NAME=vcpkg-export-$VCPKG_TRIPLET
        az artifacts universal publish --verbose --output table --feed $AZURE_UNIVERSAL_PACKAGE_FEED --scope project --name $UNIV_PACKAGE_NAME --version $UNIV_PACKAGE_VERSION --description "Release of vcpkg-export-public" --path $BUILD_ARTIFACTSTAGINGDIRECTORY
      env:
        AZURE_DEVOPS_EXT_PAT: $(WAYLAND_AZ_USER_PAT)
        AZURE_UNIVERSAL_PACKAGE_FEED: vcpkg-export-public
        UNIV_PACKAGE_VERSION: ${{ parameters.UNIV_PACKAGE_VERSION }}
      displayName: Publish Universal Package
